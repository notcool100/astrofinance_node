trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - fe/*
      - be/*

pool:
  name: 'Astro'

variables:
  nodeVersion: '24.x'

stages:
- stage: BuildFrontend
  displayName: 'Build Frontend'
  jobs:
  - job: BuildFrontendJob
    displayName: 'Build Next.js App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - script: |
        cd fe
        npm install --legacy-peer-deps
      displayName: 'Install Frontend Dependencies'
    
    - script: |
        cd fe
        npm run type-check
      displayName: 'Run TypeScript Check'
    
    - script: |
        cd fe
        npm run build
      displayName: 'Build Frontend Application'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'fe'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.tar.gz'
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend.tar.gz'
        ArtifactName: 'frontend'
        publishLocation: 'Container'

- stage: BuildBackend
  displayName: 'Build Backend'
  jobs:
  - job: BuildBackendJob
    displayName: 'Build Node.js API'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - script: |
        cd be
        npm install
      displayName: 'Install Backend Dependencies'

    - script: |
        cd be
        npm run prisma:generate
      displayName: 'Generate Prisma Client'
    
    - script: |
        cd be
        npm run build
      displayName: 'Build Backend Application'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'be'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.tar.gz'
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend.tar.gz'
        ArtifactName: 'backend'
        publishLocation: 'Container'
- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: 
    - BuildFrontend
    - BuildBackend
  condition: and(succeeded('BuildFrontend'), succeeded('BuildBackend'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - job: DeployFrontendDev
    displayName: 'Deploy Frontend to Dev'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'frontend'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
         echo "Listing downloaded files:"
         ls -la $(System.ArtifactsDirectory)
         mkdir -p /var/www/astrofinance/frontend-dev
         tar -xzf $(System.ArtifactsDirectory)/frontend/frontend.tar.gz -C /var/www/astrofinance/frontend-dev
         echo "Frontend deployed to /var/www/astrofinance/frontend-dev"
      displayName: 'Extract Frontend Build'

    - script: |
        # Check if we're running as the astro user
        if [ "$(whoami)" = "astro" ]; then
          # Running as astro, no need for sudo
          export PATH=$PATH:/home/astro/.nvm/versions/node/v24.4.1/bin
          export PM2_HOME=/home/astro/.pm2
          cd /var/www/astrofinance/frontend-dev
          pm2 restart frontend-dev || pm2 start npm --name "frontend-dev" -- start --cwd /var/www/astrofinance/frontend-dev
          pm2 save
        else
          # We need to use a different approach since sudo is not available
          echo "Current user is not astro and sudo is not available. Please configure the pipeline to run as the astro user."
          echo "Alternatively, add the pipeline user to the sudoers file with the appropriate permissions."
          exit 1
        fi
      displayName: 'Restart Frontend with PM2'

  - job: DeployBackendDev
    displayName: 'Deploy Backend to Dev'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'backend'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
        echo "Listing downloaded files:"
        ls -la $(System.ArtifactsDirectory)
        mkdir -p /var/www/astrofinance/backend-dev
        tar -xzf $(System.ArtifactsDirectory)/backend/backend.tar.gz -C /var/www/astrofinance/backend-dev
        echo "Backend deployed to /var/www/astrofinance/backend-dev"
      displayName: 'Extract Backend Build'

    - script: |
        # Check if we're running as the astro user
        if [ "$(whoami)" = "astro" ]; then
          # Running as astro, no need for sudo
          export PATH=$PATH:/home/astro/.nvm/versions/node/v24.4.1/bin
          export PM2_HOME=/home/astro/.pm2
          cd /var/www/astrofinance/backend-dev
          pm2 restart backend-dev || pm2 start npm --name "backend-dev" -- start --cwd /var/www/astrofinance/backend-dev
          pm2 save
        else
          # We need to use a different approach since sudo is not available
          echo "Current user is not astro and sudo is not available. Please configure the pipeline to run as the astro user."
          echo "Alternatively, add the pipeline user to the sudoers file with the appropriate permissions."
          exit 1
        fi
      displayName: 'Restart Backend with PM2'
