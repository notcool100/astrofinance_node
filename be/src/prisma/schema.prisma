generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                         String                   @id @default(uuid())
  username                   String                   @unique
  email                      String                   @unique
  passwordHash               String
  fullName                   String
  isActive                   Boolean                  @default(true)
  lastLogin                  DateTime?
  failedLoginAttempts        Int                      @default(0)
  passwordChangedAt          DateTime?
  passwordResetToken         String?
  passwordResetExpires       DateTime?
  twoFactorEnabled           Boolean                  @default(false)
  twoFactorSecret            String?
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  roles                      AdminUserRole[]
  approvedBudgets            Budget[]                 @relation("ApprovedByAdmin")
  createdBudgets             Budget[]                 @relation("CreatedByAdmin")
  closedDayBooks             DayBook[]                @relation("ClosedByAdmin")
  createdDayBookTransactions DayBookTransaction[]     @relation("CreatedDayBookTransaction")
  approvedJournalEntries     JournalEntry[]           @relation("ApprovedByAdmin")
  createdJournalEntries      JournalEntry[]           @relation("CreatedByAdmin")
  approvedLoans              LoanApplication[]        @relation("ApprovedByAdmin")
  verifiedDocuments          LoanDocument[]           @relation("VerifiedByAdmin")
  receivedPayments           LoanPayment[]            @relation("ReceivedByAdmin")
  createdReports             ReportTemplate[]         @relation("CreatedByAdmin")
  settingChanges             SettingAuditLog[]        @relation("ChangedByAdmin")
  updatedSettings            SystemSetting[]          @relation("UpdatedByAdmin")
  generatedCertificates      TaxCertificate[]         @relation("GeneratedByAdmin")
  verifiedExemptions         TdsExemption[]           @relation("VerifiedByAdmin")
  generatedStatements        UserAccountStatement[]   @relation("GeneratedByAdmin")
  performedTransactions      UserAccountTransaction[] @relation("PerformedByAdmin")
  createdUserAccounts        UserAccount[]            @relation("CreatedUserAccount")

  @@index([username])
  @@index([email])
  @@index([isActive])
  @@map("admin_users")
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  isSystem       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  adminUsers     AdminUserRole[]
  approvalLevels ApprovalLevel[]
  navigation     RoleNavigation[]
  permissions    RolePermission[]
  staffRoles     StaffRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid())
  code            String           @unique
  description     String?
  module          String
  action          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model AdminUserRole {
  id          String    @id @default(uuid())
  adminUserId String
  roleId      String
  createdAt   DateTime  @default(now())
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])
  role        Role      @relation(fields: [roleId], references: [id])

  @@unique([adminUserId, roleId])
  @@map("admin_user_roles")
}

model NavigationItem {
  id             String           @id @default(uuid())
  label          String
  icon           String?
  url            String?
  order          Int
  parentId       String?
  groupId        String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  group          NavigationGroup? @relation(fields: [groupId], references: [id])
  parent         NavigationItem?  @relation("NavigationItemToNavigationItem", fields: [parentId], references: [id])
  children       NavigationItem[] @relation("NavigationItemToNavigationItem")
  roleNavigation RoleNavigation[]

  @@map("navigation_items")
}

model NavigationGroup {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  order           Int
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  navigationItems NavigationItem[]

  @@map("navigation_groups")
}

model RoleNavigation {
  id               String         @id @default(uuid())
  roleId           String
  navigationItemId String
  createdAt        DateTime       @default(now())
  navigationItem   NavigationItem @relation(fields: [navigationItemId], references: [id])
  role             Role           @relation(fields: [roleId], references: [id])

  @@unique([roleId, navigationItemId])
  @@map("role_navigation")
}

model User {
  id                      String                       @id @default(uuid())
  fullName                String
  dateOfBirth             DateTime
  gender                  String?
  contactNumber           String
  email                   String?                      @unique
  address                 String
  idType                  String
  idNumber                String
  userType                UserType
  isActive                Boolean                      @default(true)
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  loanApplications        LoanApplication[]
  calculatorHistory       LoanCalculatorHistory[]
  calculatorPresets       LoanCalculatorPreset[]
  loans                   Loan[]
  taxCertificates         TaxCertificate[]
  tdsCalculations         TdsCalculation[]
  tdsExemptions           TdsExemption[]
  accounts                UserAccount[]
  notificationPreferences UserNotificationPreference[]

  @@index([contactNumber])
  @@index([idNumber])
  @@index([userType])
  @@index([isActive])
  @@map("users")
}

model UserAccount {
  id                  String                   @id @default(uuid())
  accountNumber       String                   @unique
  userId              String
  balance             Decimal                  @default(0) @db.Decimal(15, 2)
  interestRate        Decimal                  @db.Decimal(5, 2)
  openingDate         DateTime
  lastTransactionDate DateTime?
  status              AccountStatus            @default(ACTIVE)
  createdById         String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  accountType         AccountType?
  bbAccountDetails    BbAccountDetails?
  mbAccountDetails    MbAccountDetails?
  tdsCalculations     TdsCalculation[]
  statements          UserAccountStatement[]
  transactions        UserAccountTransaction[]
  createdBy           AdminUser?               @relation("CreatedUserAccount", fields: [createdById], references: [id])
  user                User                     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([openingDate])
  @@index([createdById])
  @@map("user_accounts")
}

model UserAccountTransaction {
  id                String          @id @default(uuid())
  accountId         String
  amount            Decimal         @db.Decimal(15, 2)
  transactionDate   DateTime        @default(now())
  description       String?
  referenceNumber   String?
  runningBalance    Decimal         @db.Decimal(15, 2)
  journalEntryId    String?
  performedById     String?
  transactionMethod String?
  createdAt         DateTime        @default(now())
  transactionType   TransactionType @default(DEPOSIT)
  account           UserAccount     @relation(fields: [accountId], references: [id])
  journalEntry      JournalEntry?   @relation(fields: [journalEntryId], references: [id])
  performedBy       AdminUser?      @relation("PerformedByAdmin", fields: [performedById], references: [id])

  @@index([accountId])
  @@index([transactionDate])
  @@index([accountId, transactionDate])
  @@index([journalEntryId])
  @@index([transactionType])
  @@map("user_account_transactions")
}

model BbAccountDetails {
  accountId        String      @id
  guardianName     String
  guardianRelation String
  guardianContact  String
  guardianIdType   String
  guardianIdNumber String
  maturityDate     DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  account          UserAccount @relation(fields: [accountId], references: [id])

  @@map("bb_account_details")
}

model MbAccountDetails {
  accountId            String      @id
  monthlyDepositAmount Decimal     @db.Decimal(15, 2)
  depositDay           Int
  termMonths           Int
  missedDeposits       Int         @default(0)
  maturityDate         DateTime
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  account              UserAccount @relation(fields: [accountId], references: [id])

  @@map("mb_account_details")
}

model UserAccountStatement {
  id                  String      @id @default(uuid())
  accountId           String
  statementNumber     String      @unique
  periodStartDate     DateTime
  periodEndDate       DateTime
  openingBalance      Decimal     @db.Decimal(15, 2)
  closingBalance      Decimal     @db.Decimal(15, 2)
  totalDeposits       Decimal     @default(0) @db.Decimal(15, 2)
  totalWithdrawals    Decimal     @default(0) @db.Decimal(15, 2)
  totalInterestEarned Decimal     @default(0) @db.Decimal(15, 2)
  totalFees           Decimal     @default(0) @db.Decimal(15, 2)
  generatedDate       DateTime    @default(now())
  isGenerated         Boolean     @default(false)
  generatedById       String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  account             UserAccount @relation(fields: [accountId], references: [id])
  generatedBy         AdminUser?  @relation("GeneratedByAdmin", fields: [generatedById], references: [id])

  @@index([accountId])
  @@index([periodStartDate, periodEndDate])
  @@index([accountId, periodStartDate, periodEndDate])
  @@map("user_account_statements")
}

model LoanType {
  id                   String                  @id @default(uuid())
  name                 String
  code                 String                  @unique
  interestType         InterestType
  minAmount            Decimal                 @db.Decimal(15, 2)
  maxAmount            Decimal                 @db.Decimal(15, 2)
  minTenure            Int
  maxTenure            Int
  interestRate         Decimal                 @db.Decimal(5, 2)
  processingFeePercent Decimal                 @default(0) @db.Decimal(5, 2)
  lateFeeAmount        Decimal                 @default(0) @db.Decimal(10, 2)
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  loanApplications     LoanApplication[]
  calculatorHistory    LoanCalculatorHistory[]
  calculatorPresets    LoanCalculatorPreset[]
  loans                Loan[]

  @@index([interestType])
  @@index([isActive])
  @@index([interestRate])
  @@index([name])
  @@map("loan_types")
}

model LoanCalculatorPreset {
  id           String       @id @default(uuid())
  name         String
  userId       String
  loanTypeId   String?
  amount       Decimal      @db.Decimal(15, 2)
  tenure       Int
  interestRate Decimal      @db.Decimal(5, 2)
  interestType InterestType
  startDate    DateTime
  isDefault    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  loanType     LoanType?    @relation(fields: [loanTypeId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([loanTypeId])
  @@map("loan_calculator_presets")
}

model LoanCalculatorHistory {
  id            String       @id @default(uuid())
  userId        String
  loanTypeId    String?
  amount        Decimal      @db.Decimal(15, 2)
  tenure        Int
  interestRate  Decimal      @db.Decimal(5, 2)
  interestType  InterestType
  emi           Decimal      @db.Decimal(15, 2)
  totalInterest Decimal      @db.Decimal(15, 2)
  totalAmount   Decimal      @db.Decimal(15, 2)
  calculatedAt  DateTime     @default(now())
  loanType      LoanType?    @relation(fields: [loanTypeId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([loanTypeId])
  @@index([calculatedAt])
  @@map("loan_calculator_history")
}

model LoanApplication {
  id                String            @id @default(uuid())
  applicationNumber String            @unique
  userId            String
  loanTypeId        String
  amount            Decimal           @db.Decimal(15, 2)
  tenure            Int
  purpose           String
  status            ApplicationStatus @default(PENDING)
  appliedDate       DateTime          @default(now())
  approvedDate      DateTime?
  approvedById      String?
  rejectionReason   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  approvedBy        AdminUser?        @relation("ApprovedByAdmin", fields: [approvedById], references: [id])
  loanType          LoanType          @relation(fields: [loanTypeId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  documents         LoanDocument[]
  loan              Loan?

  @@map("loan_applications")
}

model Loan {
  id                   String            @id @default(uuid())
  loanNumber           String            @unique
  applicationId        String            @unique
  userId               String
  loanTypeId           String
  principalAmount      Decimal           @db.Decimal(15, 2)
  interestRate         Decimal           @db.Decimal(5, 2)
  tenure               Int
  emiAmount            Decimal           @db.Decimal(15, 2)
  disbursementDate     DateTime?
  firstPaymentDate     DateTime?
  lastPaymentDate      DateTime?
  totalInterest        Decimal           @db.Decimal(15, 2)
  totalAmount          Decimal           @db.Decimal(15, 2)
  processingFee        Decimal           @default(0) @db.Decimal(10, 2)
  outstandingPrincipal Decimal           @db.Decimal(15, 2)
  outstandingInterest  Decimal           @db.Decimal(15, 2)
  status               LoanStatus        @default(ACTIVE)
  closureDate          DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  installments         LoanInstallment[]
  payments             LoanPayment[]
  application          LoanApplication   @relation(fields: [applicationId], references: [id])
  loanType             LoanType          @relation(fields: [loanTypeId], references: [id])
  user                 User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([loanTypeId])
  @@index([status])
  @@index([disbursementDate])
  @@index([firstPaymentDate])
  @@map("loans")
}

model LoanInstallment {
  id                 String            @id @default(uuid())
  loanId             String
  installmentNumber  Int
  dueDate            DateTime
  principalAmount    Decimal           @db.Decimal(15, 2)
  interestAmount     Decimal           @db.Decimal(15, 2)
  totalAmount        Decimal           @db.Decimal(15, 2)
  paidAmount         Decimal           @default(0) @db.Decimal(15, 2)
  remainingPrincipal Decimal           @db.Decimal(15, 2)
  paymentDate        DateTime?
  status             InstallmentStatus @default(PENDING)
  lateFee            Decimal           @default(0) @db.Decimal(10, 2)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  loan               Loan              @relation(fields: [loanId], references: [id])
  payments           LoanPayment[]

  @@index([loanId])
  @@index([dueDate])
  @@index([status])
  @@index([loanId, status])
  @@index([loanId, installmentNumber])
  @@map("loan_installments")
}

model LoanPayment {
  id                 String           @id @default(uuid())
  loanId             String
  installmentId      String?
  paymentDate        DateTime
  amount             Decimal          @db.Decimal(15, 2)
  principalComponent Decimal          @db.Decimal(15, 2)
  interestComponent  Decimal          @db.Decimal(15, 2)
  lateFeeComponent   Decimal          @default(0) @db.Decimal(10, 2)
  paymentMethod      String
  referenceNumber    String?
  receivedById       String?
  createdAt          DateTime         @default(now())
  installment        LoanInstallment? @relation(fields: [installmentId], references: [id])
  loan               Loan             @relation(fields: [loanId], references: [id])
  receivedBy         AdminUser?       @relation("ReceivedByAdmin", fields: [receivedById], references: [id])

  @@map("loan_payments")
}

model LoanDocument {
  id                String          @id @default(uuid())
  loanApplicationId String
  documentType      String
  documentName      String
  documentUrl       String
  uploadDate        DateTime        @default(now())
  status            DocumentStatus  @default(PENDING)
  verificationDate  DateTime?
  verificationNotes String?
  verifiedById      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
  verifiedBy        AdminUser?      @relation("VerifiedByAdmin", fields: [verifiedById], references: [id])

  @@index([loanApplicationId])
  @@index([status])
  @@index([documentType])
  @@map("loan_documents")
}

model Account_COA {
  id                String             @id @default(uuid())
  accountCode       String             @unique
  name              String
  accountType       AccountType_COA
  parentId          String?
  description       String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accountBalances   AccountBalance[]
  parent            Account_COA?       @relation("AccountToAccount", fields: [parentId], references: [id])
  children          Account_COA[]      @relation("AccountToAccount")
  journalEntryLines JournalEntryLine[]

  @@index([accountType])
  @@index([isActive])
  @@index([parentId])
  @@map("accounts_coa")
}

model JournalEntry {
  id                  String                   @id @default(uuid())
  entryNumber         String                   @unique
  entryDate           DateTime
  narration           String
  reference           String?
  isRecurring         Boolean                  @default(false)
  recurringInterval   String?
  recurringDay        Int?
  status              JournalEntryStatus       @default(POSTED)
  createdById         String?
  approvedById        String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  dayBookId           String?
  dayBookTransactions DayBookTransaction[]     @relation("DayBookTransactionJournalEntry")
  approvedBy          AdminUser?               @relation("ApprovedByAdmin", fields: [approvedById], references: [id])
  createdBy           AdminUser?               @relation("CreatedByAdmin", fields: [createdById], references: [id])
  dayBook             DayBook?                 @relation("DayBookJournalEntries", fields: [dayBookId], references: [id])
  journalEntryLines   JournalEntryLine[]
  accountTransactions UserAccountTransaction[]

  @@index([entryDate])
  @@index([status])
  @@index([isRecurring])
  @@index([createdById])
  @@index([approvedById])
  @@index([dayBookId])
  @@map("journal_entries")
}

model JournalEntryLine {
  id             String       @id @default(uuid())
  journalEntryId String
  accountId      String
  debitAmount    Decimal      @default(0) @db.Decimal(15, 2)
  creditAmount   Decimal      @default(0) @db.Decimal(15, 2)
  description    String?
  createdAt      DateTime     @default(now())
  account        Account_COA  @relation(fields: [accountId], references: [id])
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@map("journal_entry_lines")
}

model DayBook {
  id                  String               @id @default(uuid())
  transactionDate     DateTime
  isReconciled        Boolean              @default(false)
  isClosed            Boolean              @default(false)
  systemCashBalance   Decimal              @db.Decimal(15, 2)
  physicalCashBalance Decimal?             @db.Decimal(15, 2)
  discrepancyAmount   Decimal?             @db.Decimal(15, 2)
  discrepancyNotes    String?
  closedById          String?
  closedAt            DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bookNumber          String               @unique
  closingBalance      Decimal              @default(0) @db.Decimal(15, 2)
  openingBalance      Decimal              @default(0) @db.Decimal(15, 2)
  closedBy            AdminUser?           @relation("ClosedByAdmin", fields: [closedById], references: [id])
  transactions        DayBookTransaction[]
  journalEntries      JournalEntry[]       @relation("DayBookJournalEntries")

  @@index([transactionDate])
  @@index([bookNumber])
  @@map("day_book")
}

model DayBookTransaction {
  id                String                 @id @default(uuid())
  dayBookId         String
  transactionNumber String                 @unique
  transactionType   DayBookTransactionType
  amount            Decimal                @db.Decimal(15, 2)
  description       String
  referenceNumber   String?
  counterparty      String?
  paymentMethod     PaymentMethod          @default(CASH)
  journalEntryId    String?
  createdById       String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  createdBy         AdminUser              @relation("CreatedDayBookTransaction", fields: [createdById], references: [id])
  dayBook           DayBook                @relation(fields: [dayBookId], references: [id], onDelete: Cascade)
  journalEntry      JournalEntry?          @relation("DayBookTransactionJournalEntry", fields: [journalEntryId], references: [id])

  @@index([dayBookId])
  @@index([transactionType])
  @@index([createdAt])
  @@map("day_book_transactions")
}

model AccountBalance {
  id            String      @id @default(uuid())
  accountId     String
  asOfDate      DateTime
  debitBalance  Decimal     @default(0) @db.Decimal(15, 2)
  creditBalance Decimal     @default(0) @db.Decimal(15, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  account       Account_COA @relation(fields: [accountId], references: [id])

  @@unique([accountId, asOfDate])
  @@map("account_balances")
}

model SmsGateway {
  id        String   @id @default(uuid())
  name      String
  provider  String
  apiUrl    String
  apiKey    String?
  senderId  String?
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  priority  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  smsLogs   SmsLog[]

  @@map("sms_gateways")
}

model SmsTemplate {
  id             String     @id @default(uuid())
  name           String
  category       String
  content        String
  variables      Json?
  characterCount Int
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  smsEvents      SmsEvent[]
  smsLogs        SmsLog[]

  @@map("sms_templates")
}

model SmsEvent {
  id              String                       @id @default(uuid())
  eventCode       String                       @unique
  description     String
  templateId      String?
  isActive        Boolean                      @default(true)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  template        SmsTemplate?                 @relation(fields: [templateId], references: [id])
  smsLogs         SmsLog[]
  userPreferences UserNotificationPreference[]

  @@map("sms_events")
}

model SmsLog {
  id           String       @id @default(uuid())
  recipient    String
  message      String
  eventId      String?
  templateId   String?
  gatewayId    String?
  messageId    String?
  status       SmsStatus    @default(PENDING)
  errorMessage String?
  retryCount   Int          @default(0)
  sentAt       DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  event        SmsEvent?    @relation(fields: [eventId], references: [id])
  gateway      SmsGateway?  @relation(fields: [gatewayId], references: [id])
  template     SmsTemplate? @relation(fields: [templateId], references: [id])

  @@map("sms_logs")
}

model UserNotificationPreference {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     SmsEvent @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("user_notification_preferences")
}

model TaxType {
  id              String           @id @default(uuid())
  code            String           @unique
  name            String
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  taxCertificates TaxCertificate[]
  taxRates        TaxRate[]
  taxRemittances  TaxRemittance[]
  taxRules        TaxRule[]

  @@map("tax_types")
}

model TaxRate {
  id               String    @id @default(uuid())
  taxTypeId        String
  rate             Decimal   @db.Decimal(5, 2)
  thresholdAmount  Decimal?  @db.Decimal(15, 2)
  effectiveFrom    DateTime
  effectiveTo      DateTime?
  customerCategory String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  taxType          TaxType   @relation(fields: [taxTypeId], references: [id])

  @@map("tax_rates")
}

model TaxRule {
  id               String   @id @default(uuid())
  name             String
  taxTypeId        String
  productType      String?
  transactionType  String?
  customerCategory String?
  priority         Int      @default(1)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  taxType          TaxType  @relation(fields: [taxTypeId], references: [id])

  @@map("tax_rules")
}

model TdsCalculation {
  id                 String      @id @default(uuid())
  userId             String
  accountId          String
  transactionId      Int?
  calculationDate    DateTime
  interestAmount     Decimal     @db.Decimal(15, 2)
  tdsRate            Decimal     @db.Decimal(5, 2)
  tdsAmount          Decimal     @db.Decimal(15, 2)
  isExempted         Boolean     @default(false)
  exemptionReference String?
  status             TdsStatus   @default(CALCULATED)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  account            UserAccount @relation(fields: [accountId], references: [id])
  user               User        @relation(fields: [userId], references: [id])

  @@map("tds_calculations")
}

model TdsExemption {
  id              String     @id @default(uuid())
  userId          String
  exemptionType   String
  referenceNumber String?
  validFrom       DateTime
  validTo         DateTime?
  documentPath    String?
  isVerified      Boolean    @default(false)
  verifiedById    String?
  verifiedAt      DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User       @relation(fields: [userId], references: [id])
  verifiedBy      AdminUser? @relation("VerifiedByAdmin", fields: [verifiedById], references: [id])

  @@map("tds_exemptions")
}

model TaxCertificate {
  id                String            @id @default(uuid())
  certificateNumber String            @unique
  userId            String
  taxTypeId         String
  financialYear     String
  fromDate          DateTime
  toDate            DateTime
  totalIncome       Decimal           @db.Decimal(15, 2)
  totalTax          Decimal           @db.Decimal(15, 2)
  generatedById     String?
  generatedAt       DateTime          @default(now())
  documentPath      String?
  status            CertificateStatus @default(GENERATED)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  generatedBy       AdminUser?        @relation("GeneratedByAdmin", fields: [generatedById], references: [id])
  taxType           TaxType           @relation(fields: [taxTypeId], references: [id])
  user              User              @relation(fields: [userId], references: [id])

  @@map("tax_certificates")
}

model TaxRemittance {
  id              String           @id @default(uuid())
  taxTypeId       String
  periodFrom      DateTime
  periodTo        DateTime
  amount          Decimal          @db.Decimal(15, 2)
  paymentDate     DateTime?
  referenceNumber String?
  challanNumber   String?
  remarks         String?
  status          RemittanceStatus @default(PENDING)
  createdById     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  taxType         TaxType          @relation(fields: [taxTypeId], references: [id])

  @@map("tax_remittances")
}

model ReportTemplate {
  id                  String            @id @default(uuid())
  name                String
  description         String?
  category            String
  queryDefinition     Json
  layoutDefinition    Json
  parameterDefinition Json?
  isSystem            Boolean           @default(false)
  isActive            Boolean           @default(true)
  createdById         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reportJobs          ReportJob[]
  createdBy           AdminUser?        @relation("CreatedByAdmin", fields: [createdById], references: [id])
  scheduledReports    ScheduledReport[]

  @@map("report_templates")
}

model ReportJob {
  id            String          @id @default(uuid())
  templateId    String
  parameters    Json?
  status        ReportJobStatus @default(PENDING)
  resultData    Json?
  errorMessage  String?
  requestedById String?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  exports       ReportExport[]
  template      ReportTemplate  @relation(fields: [templateId], references: [id])

  @@map("report_jobs")
}

model ReportExport {
  id               String                  @id @default(uuid())
  reportJobId      String
  format           String
  filePath         String?
  fileSize         Int?
  status           ReportExportStatus      @default(PENDING)
  errorMessage     String?
  requestedById    String?
  downloadCount    Int                     @default(0)
  lastDownloadedAt DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  deliveryHistory  ReportDeliveryHistory[]
  reportJob        ReportJob               @relation(fields: [reportJobId], references: [id])

  @@map("report_exports")
}

model ScheduledReport {
  id              String                  @id @default(uuid())
  templateId      String
  name            String
  parameters      Json?
  frequency       ReportFrequency
  dayOfWeek       Int?
  dayOfMonth      Int?
  timeOfDay       DateTime
  format          String
  recipients      Json?
  isActive        Boolean                 @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  createdById     String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  deliveryHistory ReportDeliveryHistory[]
  template        ReportTemplate          @relation(fields: [templateId], references: [id])

  @@map("scheduled_reports")
}

model ReportDeliveryHistory {
  id                String           @id @default(uuid())
  scheduledReportId String?
  exportId          String?
  deliveryMethod    String
  recipient         String?
  status            DeliveryStatus   @default(PENDING)
  errorMessage      String?
  retryCount        Int              @default(0)
  deliveredAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  export            ReportExport?    @relation(fields: [exportId], references: [id])
  scheduledReport   ScheduledReport? @relation(fields: [scheduledReportId], references: [id])

  @@map("report_delivery_history")
}

model ExpenseCategory {
  id                      String              @id @default(uuid())
  name                    String
  description             String?
  parentId                String?
  categoryType            ExpenseCategoryType
  budgetAllocationPercent Decimal?            @db.Decimal(5, 2)
  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  budgetAllocations       BudgetAllocation[]
  parent                  ExpenseCategory?    @relation("ExpenseCategoryToExpenseCategory", fields: [parentId], references: [id])
  children                ExpenseCategory[]   @relation("ExpenseCategoryToExpenseCategory")
  expenses                Expense[]

  @@map("expense_categories")
}

model Expense {
  id                 String            @id @default(uuid())
  expenseNumber      String            @unique
  categoryId         String
  amount             Decimal           @db.Decimal(15, 2)
  taxAmount          Decimal           @default(0) @db.Decimal(15, 2)
  totalAmount        Decimal           @db.Decimal(15, 2)
  expenseDate        DateTime
  description        String
  payee              String?
  paymentMethod      String
  referenceNumber    String?
  isRecurring        Boolean           @default(false)
  recurringFrequency String?
  recurringDay       Int?
  department         String?
  project            String?
  status             ExpenseStatus     @default(PENDING)
  createdById        String?
  approvedById       String?
  approvedAt         DateTime?
  rejectionReason    String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  approvals          ExpenseApproval[]
  receipts           ExpenseReceipt[]
  category           ExpenseCategory   @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model ExpenseReceipt {
  id           String   @id @default(uuid())
  expenseId    String
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  uploadedById String?
  createdAt    DateTime @default(now())
  expense      Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_receipts")
}

model ApprovalLevel {
  id               String            @id @default(uuid())
  levelName        String
  minAmount        Decimal           @db.Decimal(15, 2)
  maxAmount        Decimal?          @db.Decimal(15, 2)
  approverRoleId   String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  approverRole     Role?             @relation(fields: [approverRoleId], references: [id])
  expenseApprovals ExpenseApproval[]

  @@map("approval_levels")
}

model ExpenseApproval {
  id              String         @id @default(uuid())
  expenseId       String
  approvalLevelId String
  approverId      String?
  status          ApprovalStatus @default(PENDING)
  comments        String?
  actionDate      DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  approvalLevel   ApprovalLevel  @relation(fields: [approvalLevelId], references: [id])
  expense         Expense        @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_approvals")
}

model Budget {
  id           String             @id @default(uuid())
  name         String
  periodType   BudgetPeriodType
  startDate    DateTime
  endDate      DateTime
  totalAmount  Decimal            @db.Decimal(15, 2)
  department   String?
  project      String?
  status       BudgetStatus       @default(DRAFT)
  createdById  String?
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  allocations  BudgetAllocation[]
  approvedBy   AdminUser?         @relation("ApprovedByAdmin", fields: [approvedById], references: [id])
  createdBy    AdminUser?         @relation("CreatedByAdmin", fields: [createdById], references: [id])

  @@map("budgets")
}

model BudgetAllocation {
  id              String          @id @default(uuid())
  budgetId        String
  categoryId      String
  allocatedAmount Decimal         @db.Decimal(15, 2)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  budget          Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@map("budget_allocations")
}

model AuditLog {
  id              String      @id @default(uuid())
  entityType      String
  entityId        String
  action          AuditAction
  performedById   String?
  performedByName String?
  previousValues  Json?
  newValues       Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime    @default(now())
  metadata        Json?

  @@index([entityType, entityId])
  @@index([action])
  @@index([performedById])
  @@index([timestamp])
  @@map("audit_logs")
}

model Staff {
  id                  String              @id @default(uuid())
  employeeId          String              @unique
  firstName           String
  lastName            String
  email               String              @unique
  phone               String
  address             String
  dateOfBirth         DateTime
  joinDate            DateTime
  department          String
  position            String
  status              StaffStatus         @default(ACTIVE)
  profileImage        String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  failedLoginAttempts Int                 @default(0)
  lastLogin           DateTime?
  passwordHash        String?
  attendance          Attendance[]
  leaves              Leave[]
  performanceReviews  PerformanceReview[]
  documents           StaffDocument[]
  roles               StaffRole[]

  @@map("staff")
}

model StaffRole {
  id        String    @id @default(uuid())
  staffId   String
  roleId    String
  startDate DateTime  @default(now())
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @relation(fields: [roleId], references: [id])
  staff     Staff     @relation(fields: [staffId], references: [id])

  @@map("staff_roles")
}

model StaffDocument {
  id           String    @id @default(uuid())
  staffId      String
  documentType String
  documentName String
  filePath     String
  uploadDate   DateTime  @default(now())
  expiryDate   DateTime?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  staff        Staff     @relation(fields: [staffId], references: [id])

  @@map("staff_documents")
}

model PerformanceReview {
  id                String       @id @default(uuid())
  staffId           String
  reviewerId        String
  reviewPeriodStart DateTime
  reviewPeriodEnd   DateTime
  overallRating     Float
  strengths         String?
  areasToImprove    String?
  goals             String?
  comments          String?
  status            ReviewStatus @default(DRAFT)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  staff             Staff        @relation(fields: [staffId], references: [id])

  @@map("performance_reviews")
}

model Attendance {
  id        String           @id @default(uuid())
  staffId   String
  date      DateTime
  checkIn   DateTime?
  checkOut  DateTime?
  status    AttendanceStatus
  comments  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  staff     Staff            @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
  @@map("attendance")
}

model Leave {
  id           String      @id @default(uuid())
  staffId      String
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  reason       String
  status       LeaveStatus @default(PENDING)
  approvedById String?
  approvedAt   DateTime?
  comments     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  staff        Staff       @relation(fields: [staffId], references: [id])

  @@map("leaves")
}

model SystemSetting {
  id          String            @id @default(uuid())
  key         String            @unique
  value       String
  description String?
  category    String            @default("GENERAL")
  isPublic    Boolean           @default(false)
  isEncrypted Boolean           @default(false)
  dataType    SettingDataType   @default(STRING)
  validation  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  updatedById String?
  auditLogs   SettingAuditLog[]
  updatedBy   AdminUser?        @relation("UpdatedByAdmin", fields: [updatedById], references: [id])

  @@index([key])
  @@index([category])
  @@map("system_settings")
}

model SettingCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String?
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("setting_categories")
}

model SettingAuditLog {
  id          String        @id @default(uuid())
  settingId   String
  oldValue    String?
  newValue    String?
  action      AuditAction
  reason      String?
  changedById String
  changedAt   DateTime      @default(now())
  changedBy   AdminUser     @relation("ChangedByAdmin", fields: [changedById], references: [id])
  setting     SystemSetting @relation(fields: [settingId], references: [id])

  @@index([settingId])
  @@index([changedAt])
  @@map("setting_audit_logs")
}

enum UserType {
  SB
  BB
  MB
}

enum AccountType {
  SB
  BB
  FD
  SH
  LS
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
  FROZEN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  INTEREST_CREDIT
  FEE_DEBIT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
}

enum InterestType {
  FLAT
  DIMINISHING
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
}

enum LoanStatus {
  ACTIVE
  CLOSED
  DEFAULTED
}

enum InstallmentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum AccountType_COA {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

enum JournalEntryStatus {
  DRAFT
  POSTED
  REVERSED
}

enum DayBookTransactionType {
  CASH_RECEIPT
  CASH_PAYMENT
  BANK_DEPOSIT
  BANK_WITHDRAWAL
  INTERNAL_TRANSFER
  LOAN_DISBURSEMENT
  LOAN_PAYMENT
  INTEREST_RECEIVED
  INTEREST_PAID
  FEE_RECEIVED
  FEE_PAID
  OTHER_INCOME
  OTHER_EXPENSE
}

enum PaymentMethod {
  CASH
  CHEQUE
  BANK_TRANSFER
  ONLINE
  CARD
  OTHER
}

enum SmsStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum TdsStatus {
  CALCULATED
  DEDUCTED
  ADJUSTED
  REVERSED
}

enum CertificateStatus {
  GENERATED
  DELIVERED
  DOWNLOADED
}

enum RemittanceStatus {
  PENDING
  PAID
  VERIFIED
}

enum ReportJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum ExpenseCategoryType {
  FIXED
  VARIABLE
  CAPITAL
  OPERATIONAL
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BudgetPeriodType {
  ANNUAL
  QUARTERLY
  MONTHLY
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PERMISSION_CHANGE
  APPROVE
  REJECT
  DISBURSE
  PAYMENT
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LATE
  ON_LEAVE
  HOLIDAY
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  DATE
  EMAIL
  URL
  PHONE
}
